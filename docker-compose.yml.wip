# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

# based on compose.yml from here: https://github.com/jupyterhub/jupyterhub-deploy-docker/blob/master/docker-compose.yml
#, here: https://github.com/FAU-DLM/GPU-Jupyterhub/blob/master/docker-compose.yml 
# , here: https://github.com/IzODA/jupyterhub/blob/master/docker-compose.yml
# , and here: https://github.com/jupyter/nb2kg/blob/master/docker-compose.yml

# latest docker-compose version compatible with nvidia-docker 
version: '2.3'

# NOTE: container_name must be removed if we want to scale
services:
        hub-db:
                # TODO: specify version
                image: postgres
                container_name: ${HUB_DB_NAME}
                restart: always
                # TODO: explore using docker volume for some env setup with dockersecrets
                environment: 
                        POSTGRES_DB: ${HUB_DB_NAME}
                        PGDATA: ${HUB_DB_DIR}
                        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
                volumes:
                        - ${HUB_DB_VOLUME}=${HUB_DB_DIR}

        hub:
                depends_on: 
                        # TODO: consider adding a health check
                        - hub-db
                build:
                        context: ./jupyterhub
                        dockerfile: jupyterhub.Dockerfile
                        args:
                                JUPYTERHUB_VERSION: ${JUPYTERHUB_VERSION}
                                HOST_SSL_KEY: ${HOST_SSL_KEY} 
                                HOST_SSL_CERT: ${HOST_SSL_CERT}
                                HOST_COOKIE_SECRET: ${HUB_COOKIE_SECRET}
                restart: always
                # TODO: specify version
                # when build is also specified, image just builds as specified and tags it with the given image name
                image: ${HUB_IMAGE_NAME}
                # nvidia runtime should only be needed for spawned notebooks
                #runtime: nvidia
                container_name: ${HUB_NAME}
                hostname: ${HUB_NAME}
                volumes:
                        # attach notebooks volume to hub. not sure if I could just attach when spawning notebooks
                        - ${USER_WORK_VOLUME}=${USER_WORK_DIR}
                        - ${HUB_DATA_VOLUME}=${HUB_DATA_DIR}
                        # Binds host's Docker socket so Hub can spawn containers 
                        - /var/run/docker.sock:/var/run/docker.sock:rw
                        - ${GLOBAL_DATA_VOLUME}=${GLOBAL_DATA_DIR}
                ports:
                        - "443:443"
                networks: 
                        - ${DOCKER_NETWORK_NAME}
                env_file: ./jupyterhub/hub.env
                environment:
                        DOCKER_NETWORK_NAME: ${DOCKER_NETWORK_NAME}
                        HUB_CONTAINER_NAME: ${HUB_NAME}
                        USER_WORK_DIR: ${USER_WORK_DIR}
                        CONFIGPROXY_AUTH_TOKEN: ${PROXY_HUB_TOKEN}
                        HUB_COOKIE_SECRET: ${HUB_COOKIE_SECRET}
                        POSTGRES_DB: ${HUB_DB_NAME}
                        POSTGRES_HOST: hub-db
                        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
                        KG_URL: ${KG_URL}
                        KG_AUTH_TOKEN: ${KG_AUTH_TOKEN}
                        #KG_ENV_WHITELIST: ${KG_ENV_WHITELIST}
                        #VALIDATE_KG_CERT: ${VALIDATE_KG_CERT}
                        #KG_CLIENT_KEY: ${KG_CLIENT_KEY} 
                        #KG_CLIENT_CERT: ${KG_CLIENT_CERT}
                        #KG_CLIENT_CA: ${KG_CLIENT_CA}                        
                        ## needed for nvidia-docker version 2
                        NVIDIA_VISIBLE_DEVICES:     all
                        NVIDIA_DRIVER_CAPABILITIES: compute,utility
                command: >
                        jupyterhub -f /srv/jupyterhub/jupyterhub_config.py
        
        nb2kg:
                image: elyra/nb2kg:2.0.0.dev0
                container_name: ${HUB_NB_NAME}
                ports:
                        - "9888:8888"
                environment:
                        KG_URL: ${KG_URL}
                        KG_HTTP_USER: ${KG_HTTP_USER}
                        KERNEL_USERNAME: ${KERNEL_USERNAME}
                        KG_AUTH_TOKEN: ${KG_AUTH_TOKEN}
                        VALIDATE_KG_CERT: "no"
                command: >
                        jupyter notebook
                        --NotebookApp.ip=0.0.0.0
                        --NotebookApp.session_manager_class=nb2kg.managers.SessionManager
                        --NotebookApp.kernel_manager_class=nb2kg.managers.RemoteKernelManager
                        --NotebookApp.kernel_spec_manager_class=nb2kg.managers.RemoteKernelSpecManager

        kernel-gateway:
                build:
                        context: ./kernel_gateway
                        dockerfile: kg.Dockerfile
                image: ${KG_IMAGE_NAME}
                container_name: ${HUB_KG_NAME}
                # unsure if specific host must be fixed to this
                ports:
                        - "9889:8888"
                networks:
                        - ${DOCKER_NETWORK_NAME} 
                env_file: ./kernel_gateway/kg.env
                restart: on-failure
                runtime: nvidia
                environment:
                        # only allow connections from hub as identified in docker network
                        # could be opened later to allow connections not incoming from the Hub
                        KG_AUTH_TOKEN: ${KG_AUTH_TOKEN}
                        ## needed for nvidia-docker version 2
                        NVIDIA_VISIBLE_DEVICES:     all
                        NVIDIA_DRIVER_CAPABILITIES: compute,utility
                command: >
                        jupyter kernelgateway
                        --KernelGatewayApp.ip=0.0.0.0
                        --KernelGatewayApp.log_level=DEBUG
        
        # TODO: this is an admin tool for the Hub DB. not sure how much we need it...
        # PHP-Adminer
        #adminer:
        # docker says this is deprecated for 2.X
        #links:
        #        - hub-db
        #image: clue/adminer:latest
        #        ports:
        #                - 7000:80
        #
        #

# create our overlay network at build time so we can enable swarm functionality if needed                            
networks:
        dcsg-hub-net: 
                name: ${DOCKER_NETWORK_NAME}
                driver: overlay

# create all our volumes at appropriate mountpoints at build time
volumes:
        # for JupHub db and cookie secrets
        hub-data:
                name: ${HUB_DATA_VOLUME}
                driver: local
                driver_opts:
                        type: volume
                        source: ${HUB_DATA_HOST_DIR}
                        o: bind
        hub-db:
                name: ${HUB_DB_VOLUME}
                driver: local
                driver_opts:
                        type: volume
                        source: ${HUB_DB_HOST_DIR}
                        o: bind
        global-data:
                name: ${GLOBAL_DATA_VOLUME}
                driver: local
                driver_opts:
                        type: volume
                        source: ${GLOBAL_DATA_HOST_DIR}
                        o: bind
        #${USER_DATA_VOLUME}:
        #        driver: local
        #        driver_opts:
        #                type: volume
        #                source: ${USER_DATA_HOST_DIR}
        #                 o: bind
        user-work-data:
                name: ${USER_WORK_VOLUME}
                driver: local
                driver_opts:
                        type: volume
                        source: ${USER_WORK_HOST_DIR}
                        o: bind
